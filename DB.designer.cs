#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace git_history4
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="git_history4")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insert제외할파일(제외할파일 instance);
    partial void Update제외할파일(제외할파일 instance);
    partial void Delete제외할파일(제외할파일 instance);
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertCommit(Commit instance);
    partial void UpdateCommit(Commit instance);
    partial void DeleteCommit(Commit instance);
    partial void InsertCommit날짜수정(Commit날짜수정 instance);
    partial void UpdateCommit날짜수정(Commit날짜수정 instance);
    partial void DeleteCommit날짜수정(Commit날짜수정 instance);
    partial void InsertNumstat(Numstat instance);
    partial void UpdateNumstat(Numstat instance);
    partial void DeleteNumstat(Numstat instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertSourceFile(SourceFile instance);
    partial void UpdateSourceFile(SourceFile instance);
    partial void DeleteSourceFile(SourceFile instance);
    partial void Insert가중치설정(가중치설정 instance);
    partial void Update가중치설정(가중치설정 instance);
    partial void Delete가중치설정(가중치설정 instance);
    partial void Insert설정(설정 instance);
    partial void Update설정(설정 instance);
    partial void Delete설정(설정 instance);
    #endregion
		
		public DBDataContext() : 
				base(global::git_history4.Properties.Settings.Default.git_history4ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<제외할파일> 제외할파일
		{
			get
			{
				return this.GetTable<제외할파일>();
			}
		}
		
		public System.Data.Linq.Table<Author> Author
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<Commit> Commit
		{
			get
			{
				return this.GetTable<Commit>();
			}
		}
		
		public System.Data.Linq.Table<Commit날짜수정> Commit날짜수정
		{
			get
			{
				return this.GetTable<Commit날짜수정>();
			}
		}
		
		public System.Data.Linq.Table<Numstat> Numstat
		{
			get
			{
				return this.GetTable<Numstat>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<SourceFile> SourceFile
		{
			get
			{
				return this.GetTable<SourceFile>();
			}
		}
		
		public System.Data.Linq.Table<가중치설정> 가중치설정
		{
			get
			{
				return this.GetTable<가중치설정>();
			}
		}
		
		public System.Data.Linq.Table<설정> 설정
		{
			get
			{
				return this.GetTable<설정>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.프로젝트내용지우기")]
		public int 프로젝트내용지우기([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> projectId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.제외할파일")]
	public partial class 제외할파일 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _패턴;
		
		private string _유형;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On패턴Changing(string value);
    partial void On패턴Changed();
    partial void On유형Changing(string value);
    partial void On유형Changed();
    #endregion
		
		public 제외할파일()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_패턴", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string 패턴
		{
			get
			{
				return this._패턴;
			}
			set
			{
				if ((this._패턴 != value))
				{
					this.On패턴Changing(value);
					this.SendPropertyChanging();
					this._패턴 = value;
					this.SendPropertyChanged("패턴");
					this.On패턴Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_유형", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 유형
		{
			get
			{
				return this._유형;
			}
			set
			{
				if ((this._유형 != value))
				{
					this.On유형Changing(value);
					this.SendPropertyChanging();
					this._유형 = value;
					this.SendPropertyChanged("유형");
					this.On유형Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _계정;
		
		private string _이메일;
		
		private string _학번;
		
		private string _이름;
		
		private EntitySet<Commit> _Commit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On계정Changing(string value);
    partial void On계정Changed();
    partial void On이메일Changing(string value);
    partial void On이메일Changed();
    partial void On학번Changing(string value);
    partial void On학번Changed();
    partial void On이름Changing(string value);
    partial void On이름Changed();
    #endregion
		
		public Author()
		{
			this._Commit = new EntitySet<Commit>(new Action<Commit>(this.attach_Commit), new Action<Commit>(this.detach_Commit));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_계정", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 계정
		{
			get
			{
				return this._계정;
			}
			set
			{
				if ((this._계정 != value))
				{
					this.On계정Changing(value);
					this.SendPropertyChanging();
					this._계정 = value;
					this.SendPropertyChanged("계정");
					this.On계정Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_이메일", DbType="VarChar(200)")]
		public string 이메일
		{
			get
			{
				return this._이메일;
			}
			set
			{
				if ((this._이메일 != value))
				{
					this.On이메일Changing(value);
					this.SendPropertyChanging();
					this._이메일 = value;
					this.SendPropertyChanged("이메일");
					this.On이메일Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_학번", DbType="VarChar(50)")]
		public string 학번
		{
			get
			{
				return this._학번;
			}
			set
			{
				if ((this._학번 != value))
				{
					this.On학번Changing(value);
					this.SendPropertyChanging();
					this._학번 = value;
					this.SendPropertyChanged("학번");
					this.On학번Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_이름", DbType="NVarChar(50)")]
		public string 이름
		{
			get
			{
				return this._이름;
			}
			set
			{
				if ((this._이름 != value))
				{
					this.On이름Changing(value);
					this.SendPropertyChanging();
					this._이름 = value;
					this.SendPropertyChanged("이름");
					this.On이름Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Commit", Storage="_Commit", ThisKey="id", OtherKey="authorId")]
		public EntitySet<Commit> Commit
		{
			get
			{
				return this._Commit;
			}
			set
			{
				this._Commit.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commit(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Commit(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Commit]")]
	public partial class Commit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _projectId;
		
		private string _commitNo;
		
		private int _authorId;
		
		private System.DateTime _시각;
		
		private string _메모;
		
		private string _merge1;
		
		private string _merge2;
		
		private System.DateTime _다운로드시각;
		
		private string _branch;
		
		private EntitySet<Commit날짜수정> _Commit날짜수정;
		
		private EntitySet<Numstat> _Numstat;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    partial void OncommitNoChanging(string value);
    partial void OncommitNoChanged();
    partial void OnauthorIdChanging(int value);
    partial void OnauthorIdChanged();
    partial void On시각Changing(System.DateTime value);
    partial void On시각Changed();
    partial void On메모Changing(string value);
    partial void On메모Changed();
    partial void Onmerge1Changing(string value);
    partial void Onmerge1Changed();
    partial void Onmerge2Changing(string value);
    partial void Onmerge2Changed();
    partial void On다운로드시각Changing(System.DateTime value);
    partial void On다운로드시각Changed();
    partial void OnbranchChanging(string value);
    partial void OnbranchChanged();
    #endregion
		
		public Commit()
		{
			this._Commit날짜수정 = new EntitySet<Commit날짜수정>(new Action<Commit날짜수정>(this.attach_Commit날짜수정), new Action<Commit날짜수정>(this.detach_Commit날짜수정));
			this._Numstat = new EntitySet<Numstat>(new Action<Numstat>(this.attach_Numstat), new Action<Numstat>(this.detach_Numstat));
			this._Author = default(EntityRef<Author>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commitNo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string commitNo
		{
			get
			{
				return this._commitNo;
			}
			set
			{
				if ((this._commitNo != value))
				{
					this.OncommitNoChanging(value);
					this.SendPropertyChanging();
					this._commitNo = value;
					this.SendPropertyChanged("commitNo");
					this.OncommitNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorId", DbType="Int NOT NULL")]
		public int authorId
		{
			get
			{
				return this._authorId;
			}
			set
			{
				if ((this._authorId != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnauthorIdChanging(value);
					this.SendPropertyChanging();
					this._authorId = value;
					this.SendPropertyChanged("authorId");
					this.OnauthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_시각", DbType="DateTime NOT NULL")]
		public System.DateTime 시각
		{
			get
			{
				return this._시각;
			}
			set
			{
				if ((this._시각 != value))
				{
					this.On시각Changing(value);
					this.SendPropertyChanging();
					this._시각 = value;
					this.SendPropertyChanged("시각");
					this.On시각Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_메모", DbType="NVarChar(4000)")]
		public string 메모
		{
			get
			{
				return this._메모;
			}
			set
			{
				if ((this._메모 != value))
				{
					this.On메모Changing(value);
					this.SendPropertyChanging();
					this._메모 = value;
					this.SendPropertyChanged("메모");
					this.On메모Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_merge1", DbType="VarChar(50)")]
		public string merge1
		{
			get
			{
				return this._merge1;
			}
			set
			{
				if ((this._merge1 != value))
				{
					this.Onmerge1Changing(value);
					this.SendPropertyChanging();
					this._merge1 = value;
					this.SendPropertyChanged("merge1");
					this.Onmerge1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_merge2", DbType="VarChar(50)")]
		public string merge2
		{
			get
			{
				return this._merge2;
			}
			set
			{
				if ((this._merge2 != value))
				{
					this.Onmerge2Changing(value);
					this.SendPropertyChanging();
					this._merge2 = value;
					this.SendPropertyChanged("merge2");
					this.Onmerge2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_다운로드시각", DbType="DateTime NOT NULL")]
		public System.DateTime 다운로드시각
		{
			get
			{
				return this._다운로드시각;
			}
			set
			{
				if ((this._다운로드시각 != value))
				{
					this.On다운로드시각Changing(value);
					this.SendPropertyChanging();
					this._다운로드시각 = value;
					this.SendPropertyChanged("다운로드시각");
					this.On다운로드시각Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string branch
		{
			get
			{
				return this._branch;
			}
			set
			{
				if ((this._branch != value))
				{
					this.OnbranchChanging(value);
					this.SendPropertyChanging();
					this._branch = value;
					this.SendPropertyChanged("branch");
					this.OnbranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commit_Commit날짜수정", Storage="_Commit날짜수정", ThisKey="id", OtherKey="commitId")]
		public EntitySet<Commit날짜수정> Commit날짜수정
		{
			get
			{
				return this._Commit날짜수정;
			}
			set
			{
				this._Commit날짜수정.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commit_Numstat", Storage="_Numstat", ThisKey="id", OtherKey="commitId")]
		public EntitySet<Numstat> Numstat
		{
			get
			{
				return this._Numstat;
			}
			set
			{
				this._Numstat.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Commit", Storage="_Author", ThisKey="authorId", OtherKey="id", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Commit.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Commit.Add(this);
						this._authorId = value.id;
					}
					else
					{
						this._authorId = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Commit", Storage="_Project", ThisKey="projectId", OtherKey="id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Commit.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Commit.Add(this);
						this._projectId = value.id;
					}
					else
					{
						this._projectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commit날짜수정(Commit날짜수정 entity)
		{
			this.SendPropertyChanging();
			entity.Commit = this;
		}
		
		private void detach_Commit날짜수정(Commit날짜수정 entity)
		{
			this.SendPropertyChanging();
			entity.Commit = null;
		}
		
		private void attach_Numstat(Numstat entity)
		{
			this.SendPropertyChanging();
			entity.Commit = this;
		}
		
		private void detach_Numstat(Numstat entity)
		{
			this.SendPropertyChanging();
			entity.Commit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commit날짜수정")]
	public partial class Commit날짜수정 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _commitId;
		
		private System.DateTime _이전시각;
		
		private System.DateTime _새시각;
		
		private EntityRef<Commit> _Commit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncommitIdChanging(int value);
    partial void OncommitIdChanged();
    partial void On이전시각Changing(System.DateTime value);
    partial void On이전시각Changed();
    partial void On새시각Changing(System.DateTime value);
    partial void On새시각Changed();
    #endregion
		
		public Commit날짜수정()
		{
			this._Commit = default(EntityRef<Commit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commitId", DbType="Int NOT NULL")]
		public int commitId
		{
			get
			{
				return this._commitId;
			}
			set
			{
				if ((this._commitId != value))
				{
					if (this._Commit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncommitIdChanging(value);
					this.SendPropertyChanging();
					this._commitId = value;
					this.SendPropertyChanged("commitId");
					this.OncommitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_이전시각", DbType="DateTime NOT NULL")]
		public System.DateTime 이전시각
		{
			get
			{
				return this._이전시각;
			}
			set
			{
				if ((this._이전시각 != value))
				{
					this.On이전시각Changing(value);
					this.SendPropertyChanging();
					this._이전시각 = value;
					this.SendPropertyChanged("이전시각");
					this.On이전시각Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_새시각", DbType="DateTime NOT NULL")]
		public System.DateTime 새시각
		{
			get
			{
				return this._새시각;
			}
			set
			{
				if ((this._새시각 != value))
				{
					this.On새시각Changing(value);
					this.SendPropertyChanging();
					this._새시각 = value;
					this.SendPropertyChanged("새시각");
					this.On새시각Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commit_Commit날짜수정", Storage="_Commit", ThisKey="commitId", OtherKey="id", IsForeignKey=true)]
		public Commit Commit
		{
			get
			{
				return this._Commit.Entity;
			}
			set
			{
				Commit previousValue = this._Commit.Entity;
				if (((previousValue != value) 
							|| (this._Commit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commit.Entity = null;
						previousValue.Commit날짜수정.Remove(this);
					}
					this._Commit.Entity = value;
					if ((value != null))
					{
						value.Commit날짜수정.Add(this);
						this._commitId = value.id;
					}
					else
					{
						this._commitId = default(int);
					}
					this.SendPropertyChanged("Commit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Numstat")]
	public partial class Numstat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _commitId;
		
		private int _sourceFileId;
		
		private int _추가된줄수;
		
		private int _삭제된줄수;
		
		private EntityRef<Commit> _Commit;
		
		private EntityRef<SourceFile> _SourceFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncommitIdChanging(int value);
    partial void OncommitIdChanged();
    partial void OnsourceFileIdChanging(int value);
    partial void OnsourceFileIdChanged();
    partial void On추가된줄수Changing(int value);
    partial void On추가된줄수Changed();
    partial void On삭제된줄수Changing(int value);
    partial void On삭제된줄수Changed();
    #endregion
		
		public Numstat()
		{
			this._Commit = default(EntityRef<Commit>);
			this._SourceFile = default(EntityRef<SourceFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commitId", DbType="Int NOT NULL")]
		public int commitId
		{
			get
			{
				return this._commitId;
			}
			set
			{
				if ((this._commitId != value))
				{
					if (this._Commit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncommitIdChanging(value);
					this.SendPropertyChanging();
					this._commitId = value;
					this.SendPropertyChanged("commitId");
					this.OncommitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sourceFileId", DbType="Int NOT NULL")]
		public int sourceFileId
		{
			get
			{
				return this._sourceFileId;
			}
			set
			{
				if ((this._sourceFileId != value))
				{
					if (this._SourceFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsourceFileIdChanging(value);
					this.SendPropertyChanging();
					this._sourceFileId = value;
					this.SendPropertyChanged("sourceFileId");
					this.OnsourceFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_추가된줄수", DbType="Int NOT NULL")]
		public int 추가된줄수
		{
			get
			{
				return this._추가된줄수;
			}
			set
			{
				if ((this._추가된줄수 != value))
				{
					this.On추가된줄수Changing(value);
					this.SendPropertyChanging();
					this._추가된줄수 = value;
					this.SendPropertyChanged("추가된줄수");
					this.On추가된줄수Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_삭제된줄수", DbType="Int NOT NULL")]
		public int 삭제된줄수
		{
			get
			{
				return this._삭제된줄수;
			}
			set
			{
				if ((this._삭제된줄수 != value))
				{
					this.On삭제된줄수Changing(value);
					this.SendPropertyChanging();
					this._삭제된줄수 = value;
					this.SendPropertyChanged("삭제된줄수");
					this.On삭제된줄수Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commit_Numstat", Storage="_Commit", ThisKey="commitId", OtherKey="id", IsForeignKey=true)]
		public Commit Commit
		{
			get
			{
				return this._Commit.Entity;
			}
			set
			{
				Commit previousValue = this._Commit.Entity;
				if (((previousValue != value) 
							|| (this._Commit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commit.Entity = null;
						previousValue.Numstat.Remove(this);
					}
					this._Commit.Entity = value;
					if ((value != null))
					{
						value.Numstat.Add(this);
						this._commitId = value.id;
					}
					else
					{
						this._commitId = default(int);
					}
					this.SendPropertyChanged("Commit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceFile_Numstat", Storage="_SourceFile", ThisKey="sourceFileId", OtherKey="id", IsForeignKey=true)]
		public SourceFile SourceFile
		{
			get
			{
				return this._SourceFile.Entity;
			}
			set
			{
				SourceFile previousValue = this._SourceFile.Entity;
				if (((previousValue != value) 
							|| (this._SourceFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceFile.Entity = null;
						previousValue.Numstat.Remove(this);
					}
					this._SourceFile.Entity = value;
					if ((value != null))
					{
						value.Numstat.Add(this);
						this._sourceFileId = value.id;
					}
					else
					{
						this._sourceFileId = default(int);
					}
					this.SendPropertyChanged("SourceFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _url;
		
		private string _path;
		
		private string _기타;
		
		private EntitySet<Commit> _Commit;
		
		private EntitySet<SourceFile> _SourceFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void On기타Changing(string value);
    partial void On기타Changed();
    #endregion
		
		public Project()
		{
			this._Commit = new EntitySet<Commit>(new Action<Commit>(this.attach_Commit), new Action<Commit>(this.detach_Commit));
			this._SourceFile = new EntitySet<SourceFile>(new Action<SourceFile>(this.attach_SourceFile), new Action<SourceFile>(this.detach_SourceFile));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="NVarChar(500)")]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_기타", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string 기타
		{
			get
			{
				return this._기타;
			}
			set
			{
				if ((this._기타 != value))
				{
					this.On기타Changing(value);
					this.SendPropertyChanging();
					this._기타 = value;
					this.SendPropertyChanged("기타");
					this.On기타Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Commit", Storage="_Commit", ThisKey="id", OtherKey="projectId")]
		public EntitySet<Commit> Commit
		{
			get
			{
				return this._Commit;
			}
			set
			{
				this._Commit.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_SourceFile", Storage="_SourceFile", ThisKey="id", OtherKey="projectId")]
		public EntitySet<SourceFile> SourceFile
		{
			get
			{
				return this._SourceFile;
			}
			set
			{
				this._SourceFile.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commit(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Commit(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_SourceFile(SourceFile entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_SourceFile(SourceFile entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceFile")]
	public partial class SourceFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _projectId;
		
		private string _경로명;
		
		private float _가중치;
		
		private string _종류;
		
		private bool _이진파일;
		
		private string _이전경로명;
		
		private int _라인수;
		
		private bool _스터디자료;
		
		private string _branch;
		
		private bool _제외;
		
		private EntitySet<Numstat> _Numstat;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    partial void On경로명Changing(string value);
    partial void On경로명Changed();
    partial void On가중치Changing(float value);
    partial void On가중치Changed();
    partial void On종류Changing(string value);
    partial void On종류Changed();
    partial void On이진파일Changing(bool value);
    partial void On이진파일Changed();
    partial void On이전경로명Changing(string value);
    partial void On이전경로명Changed();
    partial void On라인수Changing(int value);
    partial void On라인수Changed();
    partial void On스터디자료Changing(bool value);
    partial void On스터디자료Changed();
    partial void OnbranchChanging(string value);
    partial void OnbranchChanged();
    partial void On제외Changing(bool value);
    partial void On제외Changed();
    #endregion
		
		public SourceFile()
		{
			this._Numstat = new EntitySet<Numstat>(new Action<Numstat>(this.attach_Numstat), new Action<Numstat>(this.detach_Numstat));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_경로명", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string 경로명
		{
			get
			{
				return this._경로명;
			}
			set
			{
				if ((this._경로명 != value))
				{
					this.On경로명Changing(value);
					this.SendPropertyChanging();
					this._경로명 = value;
					this.SendPropertyChanged("경로명");
					this.On경로명Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_가중치", DbType="Real NOT NULL")]
		public float 가중치
		{
			get
			{
				return this._가중치;
			}
			set
			{
				if ((this._가중치 != value))
				{
					this.On가중치Changing(value);
					this.SendPropertyChanging();
					this._가중치 = value;
					this.SendPropertyChanged("가중치");
					this.On가중치Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_종류", DbType="NVarChar(50)")]
		public string 종류
		{
			get
			{
				return this._종류;
			}
			set
			{
				if ((this._종류 != value))
				{
					this.On종류Changing(value);
					this.SendPropertyChanging();
					this._종류 = value;
					this.SendPropertyChanged("종류");
					this.On종류Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_이진파일", DbType="Bit NOT NULL")]
		public bool 이진파일
		{
			get
			{
				return this._이진파일;
			}
			set
			{
				if ((this._이진파일 != value))
				{
					this.On이진파일Changing(value);
					this.SendPropertyChanging();
					this._이진파일 = value;
					this.SendPropertyChanged("이진파일");
					this.On이진파일Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_이전경로명", DbType="VarChar(500)")]
		public string 이전경로명
		{
			get
			{
				return this._이전경로명;
			}
			set
			{
				if ((this._이전경로명 != value))
				{
					this.On이전경로명Changing(value);
					this.SendPropertyChanging();
					this._이전경로명 = value;
					this.SendPropertyChanged("이전경로명");
					this.On이전경로명Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_라인수", DbType="Int NOT NULL")]
		public int 라인수
		{
			get
			{
				return this._라인수;
			}
			set
			{
				if ((this._라인수 != value))
				{
					this.On라인수Changing(value);
					this.SendPropertyChanging();
					this._라인수 = value;
					this.SendPropertyChanged("라인수");
					this.On라인수Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_스터디자료", DbType="Bit NOT NULL")]
		public bool 스터디자료
		{
			get
			{
				return this._스터디자료;
			}
			set
			{
				if ((this._스터디자료 != value))
				{
					this.On스터디자료Changing(value);
					this.SendPropertyChanging();
					this._스터디자료 = value;
					this.SendPropertyChanged("스터디자료");
					this.On스터디자료Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string branch
		{
			get
			{
				return this._branch;
			}
			set
			{
				if ((this._branch != value))
				{
					this.OnbranchChanging(value);
					this.SendPropertyChanging();
					this._branch = value;
					this.SendPropertyChanged("branch");
					this.OnbranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_제외", DbType="Bit NOT NULL")]
		public bool 제외
		{
			get
			{
				return this._제외;
			}
			set
			{
				if ((this._제외 != value))
				{
					this.On제외Changing(value);
					this.SendPropertyChanging();
					this._제외 = value;
					this.SendPropertyChanged("제외");
					this.On제외Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceFile_Numstat", Storage="_Numstat", ThisKey="id", OtherKey="sourceFileId")]
		public EntitySet<Numstat> Numstat
		{
			get
			{
				return this._Numstat;
			}
			set
			{
				this._Numstat.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_SourceFile", Storage="_Project", ThisKey="projectId", OtherKey="id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.SourceFile.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.SourceFile.Add(this);
						this._projectId = value.id;
					}
					else
					{
						this._projectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Numstat(Numstat entity)
		{
			this.SendPropertyChanging();
			entity.SourceFile = this;
		}
		
		private void detach_Numstat(Numstat entity)
		{
			this.SendPropertyChanging();
			entity.SourceFile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.가중치설정")]
	public partial class 가중치설정 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _종류;
		
		private string _값;
		
		private float _가중치;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On종류Changing(string value);
    partial void On종류Changed();
    partial void On값Changing(string value);
    partial void On값Changed();
    partial void On가중치Changing(float value);
    partial void On가중치Changed();
    #endregion
		
		public 가중치설정()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_종류", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 종류
		{
			get
			{
				return this._종류;
			}
			set
			{
				if ((this._종류 != value))
				{
					this.On종류Changing(value);
					this.SendPropertyChanging();
					this._종류 = value;
					this.SendPropertyChanged("종류");
					this.On종류Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_값", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 값
		{
			get
			{
				return this._값;
			}
			set
			{
				if ((this._값 != value))
				{
					this.On값Changing(value);
					this.SendPropertyChanging();
					this._값 = value;
					this.SendPropertyChanged("값");
					this.On값Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_가중치", DbType="Real NOT NULL")]
		public float 가중치
		{
			get
			{
				return this._가중치;
			}
			set
			{
				if ((this._가중치 != value))
				{
					this.On가중치Changing(value);
					this.SendPropertyChanging();
					this._가중치 = value;
					this.SendPropertyChanged("가중치");
					this.On가중치Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.설정")]
	public partial class 설정 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _키;
		
		private string _값;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On키Changing(string value);
    partial void On키Changed();
    partial void On값Changing(string value);
    partial void On값Changed();
    #endregion
		
		public 설정()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_키", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 키
		{
			get
			{
				return this._키;
			}
			set
			{
				if ((this._키 != value))
				{
					this.On키Changing(value);
					this.SendPropertyChanging();
					this._키 = value;
					this.SendPropertyChanged("키");
					this.On키Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_값", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string 값
		{
			get
			{
				return this._값;
			}
			set
			{
				if ((this._값 != value))
				{
					this.On값Changing(value);
					this.SendPropertyChanging();
					this._값 = value;
					this.SendPropertyChanged("값");
					this.On값Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
